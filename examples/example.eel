IMPORT "math"
IMPORT "time"
IMPORT "operator"
IMPORT "os"

################################################## Print Statement ##################################################

VAR d = {"key": "value"}
PRINT(DICT_GET(d, "key"))
PRINT(operator::lt(1, 2))
PRINT(math::fabs(-2))
PRINT(time::curr_time)
time::pause(2)
PRINT("Hello world")

################################################## Tilda-Equals Operator ##################################################

IF 1.5721 ~= 1.162 THEN
    PRINT("Tilda Equals")
ELSE
    PRINT("Tilda doesn't equal")
END

################################################## For Loop ##################################################
PRINT("-----FOR LOOP-----")
FOR i = 1 TO 6 THEN
    PRINT("Iteration " + i)
END

################################################## While Loop ##################################################
PRINT("-----WHILE LOOP-----")
VAR x = 1
WHILE x < 6 THEN
    PRINT("Iteration " + x)
    VAR x = x + 1
END

################################################## Function ##################################################
PRINT("-----FUNCTIONS-----")
FN add (num1, num2) -> num1 + num2
FN join (elements, sep)
    VAR result = ""
    VAR len = LEN(elements)

    FOR i = 0 TO len THEN
        IF i != 0 THEN
            VAR result = result + sep + elements^i
        ELSE
            VAR result = result + elements^i
        END
    END

    RETURN result
END

FN map(elements, func)
    VAR new_elements = []

    FOR i = 0 TO LEN(elements) THEN
        LS_APPEND(new_elements, func(elements^i))
    END

    RETURN new_elements
END


VAR add_res = add(1, 2)
PRINT(add_res)

VAR join_res = join(["hi", "hello", "hola"], ", ")
PRINT(join_res)

VAR map_res = map([1, 2, 3], math::double)
PRINT(map_res)

PRINT("")

