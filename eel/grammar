statements      : NEWLINE* statement (NEWLINE+ statement)* NEWLINE*

statement       : KEYWORD:RETURN expr?
                : KEYWORD:CONTINUE
                : KEYWORD:BREAK
                : expr
                : KEYWORD:IMPORT STRING

expr            : KEYWORD:VAR IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:AND|KEYWORD:OR) comp-expr)*

comp-expr       : NOT comp-expr
                : arith-expr ((EE|LT|GT|LTE|GTE) arith-expr)*

airth-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV|MOD) factor)*

factor          : (PLUS|MINUS) factor

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : INT|FLOAT|STRING|IDENTIFIER|IDENTIFIER DUBCOL IDENTIFIER
                : LPAREN expr RPAREN
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr       : LBRACKET (expr (COMMA expr)*)? RBRACKET

if-expr         : KEYWORD:IF expr KEYWORD:THEN
                  (statement if-expr-elif|if-expr-else?)
                | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else)

if-expr-elif    : KEYWORD:ELIF expr KEYWORD:THEN
                  (statement if-expr-elif|if-expr-else?)
                | (NEWLINE statements KEYWORD:END|if-expr-elif|if-expr-else)

if-expr-else    : KEYWORD:ELSE
                  statement
                | (NEWLINE statements KEYWORD:END)

for-expr        : KEYWORD:FOR IDENTIFIER EQ expr KEYWORD:TO expr
                 (KEYWORD:STEP expr)? KEYWORD:THEN
                 statement
                | (NEWLINE statements KEYWORD:END)

while-expr      : KEYWORD:WHILE expr KEYWORD:THEN
                  statement
                  | (NEWLINE statements KEYWORD:END)

func-def        : KEYWORD:FN IDENTIFIER?
                LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                (ARROW expr)
                | (NEWLINE statements KEYWORD:END)
